import pandas as pd
import streamlit as st
from io import BytesIO
import matplotlib.pyplot as plt
import numpy as np

st.set_page_config(page_title="Calcul de charge calorifique", layout="centered")

st.title("üî• Calcul de la charge calorifique en tunnel")
st.markdown("""
Ce calculateur vous permet d'estimer l'√©nergie thermique lib√©r√©e en cas d'incendie pour diff√©rents √©l√©ments install√©s dans un tunnel (c√¢bles, couvercles FRP, etc.),
ainsi que de g√©n√©rer une courbe HRR (Heat Release Rate) de forme quadratique pour la simulation.
""")

# Liste de mat√©riaux avec PCS par d√©faut (MJ/kg)
pcs_reference = {
    "C√¢ble PVC": 20,
    "C√¢ble PE": 40,
    "C√¢ble XLPE": 38,
    "Composite (FRP)": 20,
    "Plastique": 35,
    "Caoutchouc": 30,
    "Bois": 17
}

# S√©lection du mat√©riau avant le formulaire
st.subheader("üîç S√©lection du mat√©riau")
pcs_material = st.selectbox("Mat√©riau (pour PCS par d√©faut)", ["-- Aucun --"] + list(pcs_reference.keys()))
default_pcs = pcs_reference.get(pcs_material, 0.0)

if pcs_material != "-- Aucun --":
    st.markdown(f"**PCS sugg√©r√© : `{default_pcs} MJ/kg`**")

# Formulaire d'ajout
st.subheader("üßæ Ajouter un √©l√©ment")

with st.form("element_form"):
    element = st.text_input("Nom de l'√©l√©ment", "C√¢ble √©lectrique")
    unite = st.selectbox("Unit√© de mesure", ["m", "m¬≤"])
    quantite = st.number_input("Quantit√© (longueur ou surface)", min_value=0.0, step=1.0)
    masse = st.number_input("Masse lin√©aire ou surfacique (kg/unit√©)", min_value=0.0, step=0.1)
    pcs = st.number_input("Pouvoir calorifique sup√©rieur (MJ/kg)", min_value=0.0, step=0.5, value=float(default_pcs))
    submit = st.form_submit_button("Ajouter")

    if submit and element:
        st.session_state.setdefault("elements", []).append({
            "√âl√©ment": element,
            "Unit√© de mesure": unite,
            "Quantit√©": quantite,
            "Masse (kg/unit√©)": masse,
            "PCS (MJ/kg)": pcs
        })

# Affichage des r√©sultats
if "elements" in st.session_state and st.session_state["elements"]:
    df = pd.DataFrame(st.session_state["elements"])
    df["Charge calorifique (MJ)"] = df["Quantit√©"] * df["Masse (kg/unit√©)"] * df["PCS (MJ/kg)"]
    df["√âquiv. litres essence"] = (df["Charge calorifique (MJ)"] / 34).round(0).astype(int)

    st.subheader("üßÆ R√©sultat")
    st.dataframe(df, use_container_width=True)

    total_mj = df["Charge calorifique (MJ)"].sum()
    total_l = df["√âquiv. litres essence"].sum()

    st.markdown(f"**‚û°Ô∏è Charge calorifique totale : {total_mj:.2f} MJ**")
    st.markdown(f"**‚û°Ô∏è √âquivalent essence : {total_l} litres**")

    # T√©l√©chargement Excel
    output = BytesIO()
    df.to_excel(output, index=False, engine='openpyxl')
    processed_data = output.getvalue()

    st.download_button(
        label="üì• T√©l√©charger le tableau en Excel",
        data=processed_data,
        file_name="charge_calorifique_tunnel.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # HRR Curve - Courbe quadratique avec extinction
    st.subheader("üìà Courbe HRR (Heat Release Rate)")
    duree_totale = 1800  # 30 minutes
    t_monte = 600
    t_plateau = 600
    t_descente = 600

    t1 = np.linspace(0, t_monte, 200)
    alpha = 0.012
    hrr_monte = alpha * t1**2
    HRRmax = hrr_monte[-1]

    t2 = np.linspace(t_monte, t_monte + t_plateau, 200)
    hrr_plateau = np.ones_like(t2) * HRRmax

    t3 = np.linspace(t_monte + t_plateau, duree_totale, 200)
    hrr_descente = np.linspace(HRRmax, 0, len(t3))

    t_total = np.concatenate([t1, t2, t3])
    hrr_total = np.concatenate([hrr_monte, hrr_plateau, hrr_descente])

    energie_totale_hrr = np.trapz(hrr_total, t_total) / 1000  # MJ
    st.markdown(f"**Courbe HRR simul√©e : dur√©e 30 min, √©nergie d√©gag√©e ‚âà {energie_totale_hrr:.0f} MJ**")

    fig, ax = plt.subplots(figsize=(10, 4))
    ax.plot(t_total, hrr_total, color='purple')
    ax.set_title("Courbe HRR quadratique avec plateau et extinction (30 min)")
    ax.set_xlabel("Temps (s)")
    ax.set_ylabel("HRR (kW)")
    ax.grid(True)
    st.pyplot(fig)
else:
    st.info("Ajoutez au moins un √©l√©ment pour afficher les r√©sultats.")
