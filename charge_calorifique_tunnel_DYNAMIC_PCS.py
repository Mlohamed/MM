import pandas as pd
import streamlit as st
from io import BytesIO
import matplotlib.pyplot as plt
import numpy as np

st.set_page_config(page_title="Calcul de la charge calorifique HRR_STIB", layout="centered")

st.title("üî• Calcul de la charge calorifique HRR_STIB V3.1")
st.markdown("""
Ce calculateur vous permet d'estimer l'√©nergie thermique lib√©r√©e en cas d'incendie pour diff√©rents √©l√©ments install√©s dans un tunnel (c√¢bles, cloisons, rev√™tements, etc.),
ainsi que de g√©n√©rer une courbe HRR (Heat Release Rate) et d‚Äô√©valuer la contribution au feu selon la distance d'exposition. Vous pouvez √©galement analyser le risque d'inflammation
en fonction du flux thermique re√ßu, selon un seuil critique propre au mat√©riau.
""")

# Liste enrichie de mat√©riaux avec seuils critiques
materiaux_info = {
    "C√¢ble PVC": {"pcs": 20, "inflammation": 5, "flux_critique": 20},
    "C√¢ble PE": {"pcs": 40, "inflammation": 4, "flux_critique": 18},
    "Composite (FRP)": {"pcs": 20, "inflammation": 6, "flux_critique": 16},
    "Plastique": {"pcs": 35, "inflammation": 4, "flux_critique": 15},
    "Caoutchouc": {"pcs": 30, "inflammation": 6, "flux_critique": 14},
    "Bois": {"pcs": 17, "inflammation": 8, "flux_critique": 12},
    "Panneau OSB": {"pcs": 18, "inflammation": 7, "flux_critique": 11},
    "Panneau OSB 3": {"pcs": 17, "inflammation": 7, "flux_critique": 11},
    "Plaque Geproc": {"pcs": 0, "inflammation": 0, "flux_critique": 999},
    "Polystyr√®ne": {"pcs": 39, "inflammation": 2, "flux_critique": 10},
    "MDF": {"pcs": 18, "inflammation": 7, "flux_critique": 12},
    "Gyproc RF (rose)": {"pcs": 1, "inflammation": 10, "flux_critique": 999}
}

# Nom du projet
st.subheader("üê∑ Nom du projet")
nom_projet = st.text_input("Nom de l'analyse ou du projet", "Projet STIB")
st.markdown(f"**Projet :** {nom_projet}")

st.info("üîΩ Vous pouvez maintenant s√©lectionner les mat√©riaux et entrer les param√®tres pour calculer la charge calorifique et g√©n√©rer les courbes.\n\nüëâ Continuez ci-dessous.")

# Choix mat√©riau
st.subheader("üîç S√©lection du mat√©riau")
liste_materiaux = ["-- Aucun --"] + list(materiaux_info.keys())
materiau_choisi = st.selectbox("Mat√©riau (pr√©-remplit les valeurs)", liste_materiaux)

if materiau_choisi != "-- Aucun --":
    infos = materiaux_info[materiau_choisi]
    pcs_defaut = infos["pcs"]
    st.markdown(f"**PCS :** {infos['pcs']} MJ/kg")
    st.markdown(f"**Seuil critique :** {infos['flux_critique']} kW/m¬≤")
    nom_element_defaut = materiau_choisi
else:
    pcs_defaut = 0.0
    nom_element_defaut = "√âl√©ment"

# Distance d'exposition
st.subheader("üå°Ô∏è Distance par rapport √† la source de chaleur")
distance = st.slider("Distance (m)", 0.5, 5.0, 2.0, step=0.5)

if distance <= 1:
    flux = 30
elif distance <= 2:
    flux = 20
elif distance <= 3:
    flux = 12
else:
    flux = 8

st.markdown(f"**Flux thermique estim√© :** ~ {flux} kW/m¬≤")

# √âvaluation du risque par flux critique
if materiau_choisi != "-- Aucun --":
    seuil = infos["flux_critique"]
    if flux > seuil + 5:
        niveau = "üî¥ Risque √©lev√© d'inflammation"
    elif flux > seuil:
        niveau = "üü† Risque mod√©r√©"
    elif flux > seuil - 5:
        niveau = "üü° Risque faible"
    else:
        niveau = "üü¢ Risque n√©gligeable"
    st.markdown(f"**Analyse :** {niveau}")

# Formulaire
st.subheader("üßæ Ajouter un √©l√©ment")
with st.form("formulaire"):
    nom = st.text_input("Nom de l'√©l√©ment", nom_element_defaut)
    unite = st.selectbox("Unit√©", ["m", "m¬≤"])
    qte = st.number_input("Quantit√©", 0.0, step=1.0)
    masse = st.number_input("Masse (kg/unit√©)", 0.0, step=0.1)
    pcs = st.number_input("PCS (MJ/kg)", 0.0, step=0.5, value=pcs_defaut)
    ajouter = st.form_submit_button("Ajouter")

    if ajouter and nom:
        st.session_state.setdefault("elements", []).append({
            "√âl√©ment": nom,
            "Unit√©": unite,
            "Quantit√©": qte,
            "Masse (kg/unit√©)": masse,
            "PCS (MJ/kg)": pcs
        })

# R√©sultats
if "elements" in st.session_state and st.session_state["elements"]:
    df = pd.DataFrame(st.session_state["elements"])
    df["Charge calorifique (MJ)"] = df["Quantit√©"] * df["Masse (kg/unit√©)"] * df["PCS (MJ/kg)"]
    df["√âquiv. essence (L)"] = (df["Charge calorifique (MJ)"] / 34).round(0).astype(int)

    st.subheader("üìä R√©sultats")
    st.dataframe(df, use_container_width=True)

    total_mj = df["Charge calorifique (MJ)"].sum()
    total_kwh = total_mj / 3.6
    total_l = df["√âquiv. essence (L)"].sum()

    st.markdown(f"**Total √©nergie : {total_mj:.2f} MJ**")
    st.markdown(f"**Soit : {total_kwh:.1f} kWh**")
    st.markdown(f"**√âquivalent essence : {total_l} litres**")

    output = BytesIO()
    df.to_excel(output, index=False, engine="openpyxl")
    st.download_button("üì• T√©l√©charger Excel", output.getvalue(), "charge_calorifique_tunnel.xlsx")

# Message vide
else:
    st.info("Ajoutez un √©l√©ment pour voir les r√©sultats.")
