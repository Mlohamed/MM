import pandas as pd
import streamlit as st
from io import BytesIO
import matplotlib.pyplot as plt
import numpy as np

st.set_page_config(page_title="Calcul de charge calorifique HRR_STIB", layout="centered")

st.title("üî• Calcul de la charge calorifique HRR_STIB V2")
st.markdown("""
Ce calculateur vous permet d'estimer l'√©nergie thermique lib√©r√©e en cas d'incendie pour diff√©rents √©l√©ments install√©s dans un tunnel (c√¢bles, cloisons, rev√™tements, etc.),
aussi que de g√©n√©rer une courbe HRR (Heat Release Rate) et d'√©valuer la contribution au feu selon la distance d'exposition.
Vous pouvez √©galement analyser le risque d'inflammation en fonction du flux thermique re√ßu et simuler une mont√©e en puissance du feu selon plusieurs profils.
""")

# Mat√©riaux de r√©f√©rence
materiaux_info = {
    "C√¢ble PVC": {"pcs": 20, "densite": "~1.2 kg/m", "combustion": "4‚Äì6 min", "hrr": "300‚Äì500 kW", "inflammation": 5, "flux_critique": 20},
    "C√¢ble PE": {"pcs": 40, "densite": "~1.0 kg/m", "combustion": "4‚Äì8 min", "hrr": "400‚Äì800 kW", "inflammation": 4, "flux_critique": 18},
    "Composite (FRP)": {"pcs": 20, "densite": "4‚Äì10 kg/m¬≤", "combustion": "10‚Äì20 min", "hrr": "600‚Äì1000 kW", "inflammation": 6, "flux_critique": 16},
    "Plastique": {"pcs": 35, "densite": "variable", "combustion": "5‚Äì10 min", "hrr": "500‚Äì900 kW", "inflammation": 4, "flux_critique": 15},
    "Caoutchouc": {"pcs": 30, "densite": "variable", "combustion": "10‚Äì15 min", "hrr": "500‚Äì700 kW", "inflammation": 6, "flux_critique": 14},
    "Bois": {"pcs": 17, "densite": "8‚Äì15 kg/m¬≤", "combustion": "20‚Äì30 min", "hrr": "300‚Äì500 kW/m¬≤", "inflammation": 8, "flux_critique": 12},
    "Panneau OSB": {"pcs": 18, "densite": "10 kg/m¬≤", "combustion": "15‚Äì25 min", "hrr": "250‚Äì400 kW/m¬≤", "inflammation": 7, "flux_critique": 11},
    "Panneau OSB 3": {"pcs": 17, "densite": "10‚Äì12 kg/m¬≤", "combustion": "15‚Äì25 min", "hrr": "300‚Äì450 kW/m¬≤", "inflammation": 7, "flux_critique": 11},
    "Plaque Geproc": {"pcs": 0, "densite": "~10 kg/m¬≤", "combustion": "Non combustible", "hrr": "‚âà0", "inflammation": 0, "flux_critique": 999},
    "Polystyr√®ne": {"pcs": 39, "densite": "10‚Äì20 kg/m¬≥", "combustion": "3‚Äì6 min", "hrr": ">1000 kW/m¬≤", "inflammation": 2, "flux_critique": 10},
    "MDF": {"pcs": 18, "densite": "12‚Äì14 kg/m¬≤", "combustion": "15‚Äì25 min", "hrr": "300‚Äì400 kW", "inflammation": 7, "flux_critique": 12},
    "Gyproc RF (rose)": {"pcs": 1, "densite": "~10 kg/m¬≤", "combustion": "Tr√®s r√©sistant", "hrr": "‚âà0", "inflammation": 10, "flux_critique": 999}
}

# Sidebar
st.sidebar.header("üîé Aide et infos")
st.sidebar.markdown("- [Documentation PCS & HRR (PDF)](https://www.example.com)")
st.sidebar.markdown("- [R√©f√©rences ISO / NFPA](https://www.nfpa.org)")

# Nom du projet
st.subheader("üë§ Informations utilisateur (facultatif)")
nom_projet = st.text_input("Votre nom ou projet", "")
if nom_projet:
    st.markdown(f"**Projet :** {nom_projet}")

# S√©lection mat√©riau
st.markdown("---")
st.subheader("üîç S√©lection du mat√©riau")
material_list = ["-- Aucun --"] + list(materiaux_info.keys())
selected_material = st.selectbox("Mat√©riau (avec PCS par d√©faut)", material_list)

if selected_material != "-- Aucun --":
    info = materiaux_info[selected_material]
    default_pcs = info['pcs']
    st.markdown(f"**PCS :** {info['pcs']} MJ/kg")
    st.markdown(f"**HRR estim√© :** {info['hrr']}")
    st.markdown(f"**Densit√© :** {info['densite']}")
else:
    default_pcs = 0

# Formulaire
st.subheader("üßæ Ajouter un √©l√©ment")
with st.form("formulaire"):
    element = st.text_input("Nom de l'√©l√©ment", selected_material if selected_material != "-- Aucun --" else "")
    unite = st.selectbox("Unit√© de mesure", ["m", "m¬≤"])
    quantite = st.number_input("Quantit√© (longueur ou surface)", min_value=0.0, step=1.0)
    masse = st.number_input("Masse lin√©aire ou surfacique (kg/unit√©)", min_value=0.0, step=0.1)
    pcs = st.number_input("Pouvoir calorifique sup√©rieur (MJ/kg)", min_value=0.0, value=float(default_pcs), step=0.5)
    submit = st.form_submit_button("Ajouter")

    if submit and element:
        st.session_state.setdefault("elements", []).append({
            "√âl√©ment": element,
            "Unit√©": unite,
            "Quantit√©": quantite,
            "Masse (kg/unit√©)": masse,
            "PCS (MJ/kg)": pcs
        })

# Affichage des r√©sultats
if "elements" in st.session_state and st.session_state["elements"]:
    df = pd.DataFrame(st.session_state["elements"])
    df["Charge calorifique (MJ)"] = df["Quantit√©"] * df["Masse (kg/unit√©)"] * df["PCS (MJ/kg)"]
    st.subheader("üìä R√©sultat")
    st.dataframe(df)

    total_mj = df["Charge calorifique (MJ)"].sum()
    equivalent_essence = int(total_mj / 34)
    st.markdown(f"**üîπ Charge calorifique totale : {total_mj:.2f} MJ**")
    st.markdown(f"**üîπ √âquivalent essence : {equivalent_essence} litres**")

    # S√©lection du profil alpha
    st.subheader("üî• G√©n√©ration de la courbe HRR (Quadratique)")
    alpha_option = st.selectbox("Profil de feu (vitesse de croissance)", ["Lent (Œ± = 0.00293)", "Moyen (Œ± = 0.012)", "Rapide (Œ± = 0.0469)", "Ultra-rapide (Œ± = 0.1876)"])
    alpha_val = float(alpha_option.split("=")[-1].replace(")", "").strip())

    duree = st.slider("Dur√©e du feu pour la courbe HRR (minutes)", 5, 30, 10)
    duree_sec = duree * 60
    t = np.linspace(0, duree_sec, 300)
    hrr = alpha_val * t**2
    hrr = np.minimum(hrr, total_mj * 1000 / duree_sec)  # limitation par √©nergie totale

    fig, ax = plt.subplots()
    ax.plot(t/60, hrr / 1000, label=f"Courbe HRR (Œ± = {alpha_val})")
    ax.set_xlabel("Temps (min)")
    ax.set_ylabel("HRR (MW)")
    ax.set_title("Courbe de puissance calorifique lib√©r√©e")
    ax.legend()
    st.pyplot(fig)

    # Export Excel
    output = BytesIO()
    df.to_excel(output, index=False, engine='openpyxl')
    st.download_button("üì• T√©l√©charger les r√©sultats Excel", data=output.getvalue(), file_name="resultats_calorifique.xlsx")
